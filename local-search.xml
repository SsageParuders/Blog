<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Android Kernel 源码环境</title>
    <link href="/2022/11/29/Android/Android_Kernel/DevKernelSources/"/>
    <url>/2022/11/29/Android/Android_Kernel/DevKernelSources/</url>
    
    <content type="html"><![CDATA[<div class="note note-danger">            <p>工欲善其事 必先利其器</p>          </div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本篇将会搭建一个完美的Linux Kernel及其内核模块的源码阅读开发环境</p></blockquote><p>当我们开始研究Android Kernel，想要优雅的阅读源码好像是一件费劲的事情。</p><p>因为Kernel源码实在是太庞大了，打开一个c文件，想要详细的研究研究，甚至上手写两句代码，即没有高亮提示，也没有代码跳转。在这种情况下，想要理清楚内核源码，相当不易。</p><ul><li><p>用CLion？ 貌似不太行。<br>  Kernel的构建体系是make而不是类似于LLVM的CMake。Clion直接打开Kernel源码是无法被CLion解析的。</p></li><li><p>用Source Insight？貌似不是非常完美。<br>  对于Kernel源码来说，很多函数symbols一样，只是适用于不同架构罢了。Source Insight在跳转的时候，全源引索，并不会帮我们加以区分。诸如此类的问题，Source Insight还有很多…强迫症患者表示很难受~</p></li><li><p>用VsCode？貌似更不行？<br>  VsCode对C&#x2F;C++代码的高亮提示，依托于<code>C/C++ Extension Pack</code>这个插件，我不清楚别人体验如何，至少对我来说，这个插件有多烂，我都不想多做评价….</p></li></ul><h1 id="浅谈代码索引"><a href="#浅谈代码索引" class="headerlink" title="浅谈代码索引"></a>浅谈代码索引</h1><ol><li><p>为什么IDE集成开发环境可以完美的索引项目代码？<br> 参考于<a href="https://learn.microsoft.com/zh-cn/visualstudio/extensibility/language-server-protocol?view=vs-2022#what-is-the-language-server-protocol">微软的一篇文档</a>，我了解到了语言服务器这个东西。</p></li><li><p>什么是语言服务器，有什么作用？</p><ul><li>简单来说，VsCode，VIM等等，都是文本编辑器的性质，可以让我们愉快的编辑代码。而clang，gcc等等，都是代码编译套件，可以将我们的源码文件编译出来。最后clangd，rust-analyzer等等，就属于语言服务器，就是他们的工作，才使我们的源码具备了高亮提示和代码跳转方面的功能。</li><li>其实，各大IDE可以完美的对代码做解析服务，多半也是内部集成了语言服务器。</li></ul></li></ol><blockquote><p>CLion对代码索引的功能 貌似就是通过clangd实现的。</p></blockquote><ol start="3"><li><p>如何让语言服务器运作起来？<br> 我们现在知道了，想要对c语言的代码做解析，就需要clangd这个语言服务器。那么，如何让clangd运作起来呢？clangd对代码做解析，需要<code>compile_commands.json</code>文件。</p></li><li><p>该文件是什么作用？<br> 这个文件记录着我们对源码编译时候的每个命令，用的什么编译器，提供的什么编译参数，链接了哪些库，设置了什么宏，编译的什么源码文件等等。<br> 如此，clangd就可以通过编译命令，详细的了解到整个编译流程。</p></li><li><p>如何生成该文件？</p><ul><li>对于make项目来说，常规来讲，可以使用<a href="https://github.com/rizsotto/Bear">Bear</a>来对源码生成<code>compile_commands.json</code>文件。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make <span class="hljs-comment">## 原编译命令 --&gt; 不生成compile_commands.json</span><br>bear make <span class="hljs-comment">## 使用bear --&gt; 生成compile_commands.json</span><br></code></pre></td></tr></table></figure></li><li>对于CMake项目来说，这个相当简单。<br>  参考于<a href="https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html">CMake官方文档</a>，只需要设置<code>CMAKE_EXPORT_COMPILE_COMMANDS</code>为True即可在编译后生成<code>compile_commands.json</code>文件。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS True)<br></code></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>这里特别提一嘴，对于mk体系编译的的项目<br>mk脚本，其本质上是make，但是对于安卓的来说，生成编译描述文件非常简单<br>官方有<a href="https://developer.android.com/ndk/guides/ndk-build#json">文档</a>提供命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ndk-build GEN_COMPILE_COMMANDS_DB=<span class="hljs-literal">true</span> <span class="hljs-comment">## 构建的时候顺便生成compile_commands.json</span><br></code></pre></td></tr></table></figure><p>所以，理论上来说，搭建的这套代码解析方案，不仅仅适用于Kernel源码阅读。也适用于各种交叉编译</p><h1 id="敲定方案"><a href="#敲定方案" class="headerlink" title="敲定方案"></a>敲定方案</h1><div class="note note-primary">            <p>毫无疑问 Kernel的源码大多是c文件，以及少部分的汇编文件，设备树文件……</p>          </div><ol><li>明确一点，我们需要clangd支持。<br> 首先看看VsCode有没有clangd插件，搜了一下，果然有<a href="https://github.com/clangd/vscode-clangd">clangd插件</a>。</li><li>我们需要对内核编译的流程，生成描述文件。<ul><li>这里我找到一个项目，可以把已经完整编译好了的内核解析出编译描述文件出来:<a href="https://github.com/amezin/vscode-linux-kernel">vscode-linux-kernel</a>。</li><li>如何使用将在下面细说。<blockquote><p>Kernel正好是make体系，理论上是可以用Bear的。<br>由于我做教程的时候，已经把内核编译结束了，实在不想重新编译内核，理论上选哪个都一样，我们只是要个编译描述文件罢。<br><del>这该死的LTO流程 太占用内存了</del></p></blockquote></li></ul></li></ol><ul><li>使用套件最终定型:<br>  VsCode + clangd + 编译描述文件 + C&#x2F;C++ Extension Pack<blockquote><p>虽然C&#x2F;C++ Extension Pack相当的烂，但是部分C&#x2F;C++方面的东西，还需他提供支持。<br>所以这里依然需要安装该插件，后续在设置中禁用掉他的代码提示服务，转交给clangd插件即可。</p></blockquote></li></ul><div class="note note-info">            <p>关于clangd插件</p>          </div><ul><li>这个插件会网络下载clangd的bin文件，很多人可能网络不佳，会下载失败。</li><li>这里不需要担心这个，我们只管安装插件即可，ndk里面自带的clangd就可以提供语言解析服务了，VsCode设置里面指定clangd路径即可。</li><li>而且，貌似高版本clangd有什么大病？</li></ul><h1 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h1><h2 id="完整编译内核"><a href="#完整编译内核" class="headerlink" title="完整编译内核"></a>完整编译内核</h2><pre><code class="hljs">- 这里以ACK(Android Common Kernel)为例.    因为ACK的编译最简单，不会出乱七八糟的错误，Google基本上完善好了一键编译体系。- 参考[Google官方文档](https://source.android.google.cn/docs/setup/build/building-kernels)&gt; 这里默认读者会换源或者其他手法保持网络通畅- 步骤简述:    1. 初始化repo库        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 这里选择common-android12-5.10分支</span><br>repo init -u https://android.googlesource.com/kernel/manifest -b common-android12-5.10<br></code></pre></td></tr></table></figure>    2. 同步repo库代码        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">repo <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure>        漫长的等待...    3. 选择自己需要的config文件，开启`build.sh`脚本        这里以`build.config.gki.aarch64`为例        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh<br></code></pre></td></tr></table></figure>    4. 等待一段时间后，内核即可编译完成:        ![内核编译完成](https://cdn.hongqing.online/image/20221130021127.png)</code></pre><h2 id="生成编译描述文件"><a href="#生成编译描述文件" class="headerlink" title="生成编译描述文件"></a>生成编译描述文件</h2><pre><code class="hljs">- 仔细观察我们编译的out目录，会发现有很多后缀为cmd的文件，这些其实就是编译过程中的临时文件，包含了编译命令等。- [vscode-linux-kernel](https://github.com/amezin/vscode-linux-kernel)其实就是利用编译后的cmd等文件做解析，生成编译描述文件`compile_commands.json`。- 步骤简述:    1. 进入内核源码的根目录，将[vscode-linux-kernel](https://github.com/amezin/vscode-linux-kernel)项目拉下来:    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> common <span class="hljs-comment"># 进入内核源码根目录</span><br><span class="hljs-comment"># clone vscode-linux-kernel项目到.vscode文件夹</span><br><span class="hljs-comment"># 该文件夹为vscode配置文件夹 类似于.idea</span><br>git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/amezin/vscode-linux-kernel.git .vscode<br></code></pre></td></tr></table></figure>    2. 运行python脚本，并指定`-O`参数到编译产出目录:    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python .vscode/generate_compdb.py -O ../out/android12-5.10/common/<br><span class="hljs-built_in">ls</span> -al | grep compile_commands.json<br><span class="hljs-comment"># -rw-r--r--   1 kali kali 8888862 Nov 30 01:07 compile_commands.json</span><br></code></pre></td></tr></table></figure>    ![示例图片](https://cdn.hongqing.online/image/202211301407978.png)    可以看到，源码目录下的`compile_commands.json`文件已经生成。&gt; 对于Out-of-tree编译的内核模块&gt; 详细见原项目地址的[Out-of-tree module development](https://github.com/amezin/vscode-linux-kernel#out-of-tree-module-development)</code></pre><h2 id="配置VsCode"><a href="#配置VsCode" class="headerlink" title="配置VsCode"></a>配置VsCode</h2><pre><code class="hljs">对于VsCode来说`.vscode`目录下，是一些配置文件。我们修改原项目的`setting.json`文件，内容修改成如下:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;iostream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;intrinsics.h&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ostream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;vector&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.formatOnPaste&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 关闭 C/C++ Extension Pack 插件的提示</span><br>    <span class="hljs-comment">// 防止其与clangd冲突</span><br>    <span class="hljs-attr">&quot;C_Cpp.errorSquiggles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;C_Cpp.intelliSenseEngineFallback&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;C_Cpp.intelliSenseEngine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;C_Cpp.autocomplete&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Disabled&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// So you don&#x27;t get autocomplete from both extensions.</span><br>    <span class="hljs-comment">// 指向clangd路径</span><br>    <span class="hljs-attr">&quot;clangd.path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/tmp/NDK/ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin/clangd&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// compelie_commands.json 文件的目录位置(相对于工作区，由于 CMake 生成的该文件默认在 build 文件夹中，故设置为 build)</span><br>        <span class="hljs-string">&quot;--compile-commands-dir=$&#123;workspaceFolder&#125;/&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 让 Clangd 生成更详细的日志</span><br>        <span class="hljs-string">&quot;--log=verbose&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输出的 JSON 文件更美观</span><br>        <span class="hljs-string">&quot;--pretty&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 全局补全(输入时弹出的建议将会提供 CMakeLists.txt 里配置的所有文件中可能的符号，会自动补充头文件)</span><br>        <span class="hljs-string">&quot;--all-scopes-completion&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 建议风格：打包(重载函数只会给出一个建议）</span><br>        <span class="hljs-comment">// 相反可以设置为detailed</span><br>        <span class="hljs-string">&quot;--completion-style=bundled&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 跨文件重命名变量</span><br>        <span class="hljs-string">&quot;--cross-file-rename&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 允许补充头文件</span><br>        <span class="hljs-string">&quot;--header-insertion=iwyu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分</span><br>        <span class="hljs-string">&quot;--header-insertion-decorators&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 在后台自动分析文件(基于 complie_commands，我们用CMake生成)</span><br>        <span class="hljs-string">&quot;--background-index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用 Clang-Tidy 以提供「静态检查」</span><br>        <span class="hljs-string">&quot;--clang-tidy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// Clang-Tidy 静态检查的参数，指出按照哪些规则进行静态检查，详情见「与按照官方文档配置好的 VSCode 相比拥有的优势」</span><br>        <span class="hljs-comment">// 参数后部分的*表示通配符</span><br>        <span class="hljs-comment">// 在参数前加入-，如-modernize-use-trailing-return-type，将会禁用某一规则</span><br>        <span class="hljs-string">&quot;--clang-tidy-checks=cppcoreguidelines-*,performance-*,bugprone-*,portability-*,modernize-*,google-*&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 默认格式化风格: 谷歌开源项目代码指南</span><br>        <span class="hljs-string">&quot;--fallback-style=file&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 同时开启的任务数量</span><br>        <span class="hljs-string">&quot;-j=2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能) 推荐在板子上使用disk</span><br>        <span class="hljs-string">&quot;--pch-storage=disk&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末</span><br>        <span class="hljs-comment">// 我选择禁用</span><br>        <span class="hljs-string">&quot;--function-arg-placeholders=false&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>注释已经写到相当清楚，这里不再赘述。</code></pre><h2 id="打开Kernel根目录，等待索引结束"><a href="#打开Kernel根目录，等待索引结束" class="headerlink" title="打开Kernel根目录，等待索引结束"></a>打开Kernel根目录，等待索引结束</h2><pre><code class="hljs">- 我这里是ssh远程连接的Linux虚拟机。- 打开源码根目录后，随便打开一个c文件，触发VsCode的插件后，他会提示你，你的默认配置会被`.vscode`目录下的setting文件覆盖，是否确认:![是否确认](https://cdn.hongqing.online/image/202211301427628.png)- 这里当然选择YES，使用我们配置的setting。- 停留在c文件上面，等待一段时间，则会出现如下画面:![解析](https://cdn.hongqing.online/image/202211301432729.png)- 左边会出现`.cache`缓存目录，里面不断缓存着整个内核源码的index索引。- 左下角有一个indexing，意味着clangd解析整个源码的进度。- 当indexing解析结束后，打开内核源码的任意c文件，都可以自由的跳转头文件，跳转到函数定义和实现，智能提示函数和结构体等等。就和用IDE写代码一样，非常丝滑舒服。- 所有的索引都在一秒不到内可以完成，而且也不会高额占用机器性能。- 甚至他还会结合编译的config，对未开启的config代码块不高亮显示:![config解析](https://cdn.hongqing.online/image/202211301440266.png)</code></pre><h1 id="做一些润滑"><a href="#做一些润滑" class="headerlink" title="做一些润滑"></a>做一些润滑</h1><ul><li><p>你发现会报很多无关痛痒的错误:<br>  <img src="https://cdn.hongqing.online/image/202211301447711.png" alt="Warning"></p><ol><li>内核源码根目录下，新建一个文件<code>.clangd</code>，内容如下: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">CompileFlags:<br>    Add: [-Wno-declaration-after-, -Wno-int-conversion, -Wno-all]<br><br>Diagnostics:<br>    ClangTidy:<br>        Remove: bugprone-sizeof-expression<br></code></pre></td></tr></table></figure></li><li>Reload Windows后，Warning消失不见。</li></ol></li><li><p>小技巧:</p><ol><li>cmd + T 全内核源码搜索Symbols</li><li>cmd + Shift + o 当前文件搜索Symbols<br>  <img src="https://cdn.hongqing.online/image/202211301446745.png" alt="Symbols搜索"></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Android Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
